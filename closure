in closure even if the execution context of function expression pops out the variable associated inside it stays in the memory no garbage collection happens as the function inside can reference to it

closure always holds the current value of the reference

function abc(){
    var arr = [];
    for(var i = 0; i<3; i++){
        arr.push(
            function(){
                console.log(i);
            }
        )
    }
    return arr;
}
var fs = abc();
fs[0](); //3
fs[1](); //3
fs[2](); //3


function abc(){
    var arr = [];
    for(var i = 0; i<3; i++){
        let j = i;
        arr.push(
            function(){
                console.log(j);
            }
        )
    }
    return arr;
}
var fs = abc();
fs[0](); //0
fs[1](); //1
fs[2](); //2



function abc(){
    var arr = [];
    for(var i = 0; i<3; i++){
        arr.push(
            (function(j){ //IIFE
                return function(){
                    console.log(j);
                }
            }(i))
        )
    }
    return arr;
}
var fs = abc();
fs[0](); //0
fs[1](); //1
fs[2](); //2


function makeGreeting(language) {
 
    return function(firstname, lastname) {
     
        if (language === 'en') {
            console.log('Hello ' + firstname + ' ' + lastname);   
        }

        if (language === 'es') {
            console.log('Hola ' + firstname + ' ' + lastname);   
        }
        
    }
    
}

var greetEnglish = makeGreeting('en');
var greetSpanish = makeGreeting('es');

greetEnglish('John', 'Doe');
greetSpanish('John', 'Doe');

var funct = function funct(){
    var a = 2,
        b = 3;
    var funct2 = function funct2(){
        console.log(a + b);
    };
    setTimeout(funct2, 1000);
}
funct();


(function counter(){
    var cnt=0,
        item1=document.querySelector('#item1'),
        item2=document.querySelector('#item2');

    var print = function print(){
        console.log(cnt);
    }
    item1.addEventListener('click', function count1(){
        cnt++;
        print();
    });
    item2.addEventListener('click', function count2(){
        cnt++;
        print();
    })
}())


Modular Pattern
var APP = (function module(){
    var a = 3;
    var printIt = function printIt(val) {
        console.log(val);
    };
    var sumIt = function sumIt(b){
        printIt(a + b);
    };
    var multiplyIt = function multiplyIt(b){
        print(a * b);
    };
    return {
        sumIt: sumIt,
        multiplyIt: multiplyIt
    }
})