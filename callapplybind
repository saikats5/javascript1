all functions have access to call(), apply(), bind()

var logName = function(){}.bind(abc); //doesn't eexcute immediately it creates a copy
(function(){}).apply(abc, ['en', 'es']);

call and apply works as () of function

Function borrowing
var person = {
    firstname: 'saikat',
    lastname: 'saha',
    getFullname: function(){
        console.log(this.firstname);
    }
}

var person2 = {
    firstname: 'saik',
    lastname: 'saha'
}

person.getFullname.apply(person2)


Function Currying
it applies to bind and the 2nd parameter onwards will set permanent value for arguements

function multiply(a, b){
    return a*b;
}
function multiplyByTwo(b){
    var a = 2;
    return a*b;
}
var multiplyByTwo = multiply.bind(this, 2);

function a(b,c,d){
	console.log(this);
	console.log(b);
	console.log(c);
	console.log(d);
}
a.call(1,2,3,4); // 1 2 3 4
a.apply(1,[2,3,4]); // 1 2 3 4

a.name // a
a.lehgth // no of arguments
function is an object so we can add properties
a.moo = 1;
a.toString() // complete function

call,apply,bind is used to stabilize the value of 'this'

a.call() === a()

"use strict";
function a(){
	console.log(this); // undefined in strict mode // Object {} with call
}
a.call({});
a.call(1); // value of this is 1

var a = {
	checkThis: function(){
		function checkOther(){
			console.log(this);
		}
		checkOther.call(this);
	}
}

a.checkThis() // a{}
a.checkThis.call(a) // a{}
a.checkThis.call() // window
a.checkThis.call() // undefined in 'use strict'

function sum() {
	var total = 0;
	for(var i = 0; i < arguements.length; i++){
		total += arguments[i];
	}
	return total;
}
var things = [1,2,3,4,5,6,7,8,9];
var x = sum.apply(null, things);

.bind() associated with the function during definition not during call
 var a = function(){
	console.log(this);
 }.bind(1);
 a(); // 1
 var abc = {
	func: a
 }
 abc.a() // 1
 bind only works with function expression not function abc(){}
 
 var a = {
	checkThis: function(){
		var checkOther = function(){
			console.log(this);
		}.bind(this);
		checkOther();
	}
}

