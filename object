. is an operator // left to right

var person = new Object();
person.name = 'saikat';
person.['firstname'] = 'saikat';
person.[lastname] //variable

function greet(person){
    console.log('Hi ' + person.firstname);
}

greet({firstname: 'saikat', lastname: 'saha'})


functions are objects

greet.language = 'english';

anonymousGreet(); //Uncaught Typeerror: undefined is not a function

var anonymousGreet = function(){
    console.log('hi');
}

every execution context has its own 'this' property which points to window object

c = {
    name: 'The c object',
    log: function(){
        var self = this;
        this.name = 'updated c object';
        //self.name = 'updated c object';
        console.log(this); //c
        //console.log(self); //c

        var setname = function(newname){
            this.name = newname; //this = window
            //self.name = newname; //self = c
        }
        setname('updated again the c object');
        console.log(this);
        //console.log(self);
    }
}