. is an operator // left to right

var person = new Object();
person.name = 'saikat';
person.['firstname'] = 'saikat';
person.[lastname] //variable

function greet(person){
    console.log('Hi ' + person.firstname);
}

greet({firstname: 'saikat', lastname: 'saha'})


functions are objects

greet.language = 'english';

anonymousGreet(); //Uncaught Typeerror: undefined is not a function

var anonymousGreet = function(){
    console.log('hi');
}

every execution context has its own 'this' property which points to window object

c = {
    name: 'The c object',
    log: function(){
        var self = this;
        this.name = 'updated c object';
        //self.name = 'updated c object';
        console.log(this); //c
        //console.log(self); //c

        var setname = function(newname){
            this.name = newname; //this = window
            //self.name = newname; //self = c
        }
        setname('updated again the c object');
        console.log(this);
        //console.log(self);
    }
}

let toyota = {
	drive(){
		return 'driving toyota';
	},
	break(){
		return 'breaking toyota';
	}
}

let camry = {
	wifi(){
		return 'using wifi';
	}
}

Object.assign(camry, toyota);
//camry{drive(),break,wifi}
if same functions are inserted suppose drive(), then it will take the copied one i.e., 'driving toyota'
let newToyotaCopy = Object.assign({},toyota); //it is shallow copy i.e., only local property copy not prototype property copy
Object.assign(toyota, wifi(){return 'using wifi', color: 'red'}) //toyota{drive(), break(), wifi(), color}

let c1 = function(x,y,z){
	this.x = x;
	this.y = y;
	this.z = z;
}
let c1 = function(x,y,z){
	Object.assign(this, {x,y,z});
}

let base = {a:1, b:2}
let obj = Object.create(base);
obj['c'] = 3;

for(prop in obj) // show even the inherited properties
obj.hasOwnProperty(prop)

let base = {a:1, b:2}
let obj = Object.create(base); // it creates a new object whose prototype points to base object, that means obj's prototype will be base
